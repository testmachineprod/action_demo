import z from "zod";
import { COMMAND_ACTIONS } from "../utils/constants.js";
function getFlagFromOption(opt) {
    return `--${opt.replace(/([A-Z])/g, "-$1").toLowerCase()}`;
}
function generateCommand(zObject, ...requirements) {
    let result = zObject;
    for (const { action, requiredOptions } of requirements) {
        result = result.refine((input) => {
            const missingOptions = requiredOptions.filter((opt) => !Object.keys(input.options).includes(opt));
            return input.action !== action || missingOptions.length === 0;
        }, `Some of the following required options are missing: ${requiredOptions
            .map((opt) => getFlagFromOption(opt))
            .join(", ")}`);
    }
    return result;
}
export const AnalysisObservationSchema = z.object({
    id: z.number(),
    sourcePath: z.string().nullable().optional(),
    severity: z.string(),
    startColumn: z.number().nullable().optional(),
    endColumn: z.number().nullable().optional(),
    startLine: z.number(),
    endLine: z.number(),
    message: z.string(),
    recommendation: z.string().nullable().optional(),
    swcId: z.string().nullable().optional(),
    title: z.string()
});
export const AnalysisOutputSchema = z.object({
    id: z.number().optional(),
    analysisRequestId: z.number().optional(),
    completedAt: z
        .string()
        .transform((dateString) => new Date(dateString))
        .nullable(),
    error: z.string().nullable().optional(),
    requestedAt: z.string().transform((dateString) => new Date(dateString)),
    status: z.string(),
    target: z.object({
        kind: z.string(),
        name: z.string()
    }),
    tool: z.object({
        name: z.string()
    })
});
export const AnalysisRequestSchema = z.object({
    analyses: AnalysisOutputSchema.array(),
    createdAt: z.string().transform((dateString) => new Date(dateString)),
    id: z.number()
});
export const RepositoryOutputSchema = z.object({
    id: z.number(),
    name: z.string(),
    createdAt: z.string().transform((dateString) => new Date(dateString)),
    _count: z.object({
        snapshots: z.number().nonnegative(),
        analyses: z.number().nonnegative()
    })
});
export const SnapshotOutputSchema = z.object({
    id: z.number(),
    createdAt: z.string().transform((dateString) => new Date(dateString)),
    _count: z.object({
        files: z.number().nonnegative(),
        analyses: z.number().nonnegative()
    })
});
export const CreateRepositorySchema = z.object({
    name: z.string(),
    id: z.number()
});
export const RepoCommandSchema = generateCommand(z.object({
    action: z.enum([COMMAND_ACTIONS.LIST, COMMAND_ACTIONS.CREATE]),
    options: z.object({
        name: z.string().optional()
    })
}), { action: COMMAND_ACTIONS.CREATE, requiredOptions: ["name"] });
export const SnapshotCommandSchema = generateCommand(z.object({
    action: z.enum([
        COMMAND_ACTIONS.LIST,
        COMMAND_ACTIONS.CREATE,
        COMMAND_ACTIONS.ANALYZE,
        COMMAND_ACTIONS.SCAN
    ]),
    options: z
        .object({
        repoId: z.preprocess((idString) => parseInt(idString), z.number().min(1)),
        snapshotId: z.preprocess((idString) => parseInt(idString), z.number().min(1)),
        tools: z.string().array(),
        file: z.string().array(),
        partial: z.boolean()
    })
        .partial()
}), { action: COMMAND_ACTIONS.LIST, requiredOptions: ["repoId"] }, { action: COMMAND_ACTIONS.CREATE, requiredOptions: ["repoId", "file"] }, { action: COMMAND_ACTIONS.ANALYZE, requiredOptions: ["snapshotId"] }, { action: COMMAND_ACTIONS.SCAN, requiredOptions: ["repoId", "file"] });
export const AnalysesCommandSchema = generateCommand(z.object({
    action: z.enum([
        COMMAND_ACTIONS.LIST,
        COMMAND_ACTIONS.GET,
        COMMAND_ACTIONS.REPORT,
        COMMAND_ACTIONS.PROGRESS
    ]),
    options: z
        .object({
        snapshotId: z.preprocess((idString) => parseInt(idString), z.number().min(1)),
        analysisId: z.preprocess((idString) => parseInt(idString), z.number().min(1)),
        analysisRequestId: z.preprocess((idString) => parseInt(idString), z.number().min(1))
    })
        .partial()
}), { action: COMMAND_ACTIONS.LIST, requiredOptions: ["snapshotId"] }, { action: COMMAND_ACTIONS.GET, requiredOptions: ["analysisId"] }, { action: COMMAND_ACTIONS.REPORT, requiredOptions: ["analysisRequestId"] }, { action: COMMAND_ACTIONS.PROGRESS, requiredOptions: ["analysisRequestId"] });
export const CreateAnalysisSchema = z.object({
    analysisRequest: AnalysisRequestSchema,
    skippedTools: z.string().array().optional()
});
export const CreateRepositorySnapshotSchema = z.object({
    id: z.number(),
    contractErrors: z
        .object({
        filename: z.string(),
        error: z.string()
    })
        .array()
});
// TODO: We should receive status here as well as analysisId (right now it's only analysis result id what we got)
export const AnalysisResultsSchema = z.object({
    id: z.number(),
    status: z.string(),
    error: z.string().nullable(),
    requestedAt: z.string().transform((dateString) => new Date(dateString)),
    completedAt: z
        .string()
        .transform((dateString) => new Date(dateString))
        .nullable(),
    observations: AnalysisObservationSchema.array(),
    tool: z.object({
        name: z.string()
    })
});
export const AnalysisReportSchema = z.object({
    downloadURLOfGeneratedReport: z.string(),
    errorMessage: z.string().optional().nullable()
});
export const ListRepositoriesSchema = z.object({
    repositories: RepositoryOutputSchema.array()
});
export const ListRepositorySnapshotsSchema = z.object({
    snapshots: SnapshotOutputSchema.array()
});
export const ListSnapshotAnalysesSchema = AnalysisOutputSchema.array();
export const ListAnalysesToolsSchema = z.object({
    tools: z
        .object({
        name: z.string(),
        requiresMetadata: z.boolean()
    })
        .array()
});
export const ListSnapshotFilesSchema = z.object({
    files: z
        .object({
        id: z.number(),
        path: z.string(),
        metadataFileId: z.number().nullable()
    })
        .array()
});
