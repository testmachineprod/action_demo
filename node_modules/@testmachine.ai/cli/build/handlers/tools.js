import axios from "axios";
import getAPI from "../config/api.js";
import handleError from "../utils/handleError.js";
import getSpinner from "../utils/getSpinner.js";
import chalk from "chalk";
import { COMMAND_ACTIONS } from "../utils/constants.js";
import { generateOutputTable } from "../utils/ttyOutputHelper.js";
import SystemParameters from "../config/config.js";
import { ListAnalysesToolsSchema } from "../types/schemas.js";
export default async function handleToolsAction(action) {
    const api = await getAPI();
    switch (action) {
        case COMMAND_ACTIONS.LIST:
            return listTools(api);
        default:
            handleError({
                error: {
                    message: `Invalid action: [${action}] must be in [${COMMAND_ACTIONS.LIST}, ${COMMAND_ACTIONS.CREATE}, ${COMMAND_ACTIONS.ANALYZE}, ${COMMAND_ACTIONS.SCAN}].`
                }
            });
    }
}
async function listTools(api) {
    const spinner = getSpinner("Retrieving tools...");
    let response;
    let toolsResponse;
    try {
        response = await api.get("/analyses/tools");
        const parsedResponse = ListAnalysesToolsSchema.safeParse(response.data);
        if (!parsedResponse.success) {
            return handleError({
                error: {
                    message: "Invalid response from API"
                }
            });
        }
        toolsResponse = parsedResponse.data;
    }
    catch (processError) {
        if (axios.isAxiosError(processError)) {
            return handleError({
                response: processError.response
            });
        }
        else {
            return handleError({
                error: {
                    message: processError.message
                }
            });
        }
    }
    finally {
        spinner.stop();
    }
    if (SystemParameters.getInstance().isJsonOutput()) {
        console.log(JSON.stringify(toolsResponse));
    }
    else {
        console.log(chalk.green(`\nTools:`));
        const result = toolsResponse.tools.map((tool) => {
            return [tool.name];
        });
        const columnAttributes = [
            {
                headerLabel: "Name"
            }
        ];
        console.table(generateOutputTable(columnAttributes, result));
    }
}
