import axios from "axios";
import chalk from "chalk";
import getAPI from "../config/api.js";
import SystemParameters from "../config/config.js";
import getSpinner from "../utils/getSpinner.js";
import handleError from "../utils/handleError.js";
import { AnalysisReportSchema, AnalysisResultsSchema, ListSnapshotAnalysesSchema } from "../types/schemas.js";
import { ColumnAlignment, generateOutputTable } from "../utils/ttyOutputHelper.js";
import { COMMAND_ACTIONS } from "../utils/constants.js";
import humanDatesDiff from "../utils/humanDatesDiff.js";
export async function handleAnalysisAction(action, snapshotId, analysisId, analysisRequestId) {
    const api = getAPI();
    if (snapshotId)
        snapshotId = parseInt(snapshotId.toString());
    if (analysisId)
        analysisId = parseInt(analysisId.toString());
    if (analysisRequestId)
        analysisId = parseInt(analysisRequestId.toString());
    switch (action) {
        case COMMAND_ACTIONS.LIST:
            return listAnalyses(api, snapshotId);
        case COMMAND_ACTIONS.GET:
            return getAnalysis(api, analysisId);
        case COMMAND_ACTIONS.REPORT:
            return getAnalysisReport(api, analysisRequestId);
        case COMMAND_ACTIONS.PROGRESS:
            return getAnalysesProgress(api, analysisRequestId);
        default:
            handleError({
                error: {
                    message: `Invalid action: [${action}] must be in [${COMMAND_ACTIONS.LIST}, ${COMMAND_ACTIONS.GET}, ${COMMAND_ACTIONS.REPORT}].`
                }
            });
    }
}
async function listAnalyses(api, snapshotId) {
    if (!snapshotId)
        handleError({
            error: { message: "Missing required argument: snapshotId" }
        });
    const spinner = getSpinner("Retrieving analyses...");
    let response;
    let analyses;
    try {
        response = await api.get(`/snapshots/${snapshotId}/analyses`);
        const parsedResponse = ListSnapshotAnalysesSchema.safeParse(response.data);
        if (!parsedResponse.success) {
            return handleError({
                error: {
                    message: "Invalid response from API"
                }
            });
        }
        analyses = parsedResponse.data;
    }
    catch (processError) {
        if (axios.isAxiosError(processError)) {
            return handleError({
                response: processError.response
            });
        }
        else {
            return handleError({
                error: {
                    message: processError.message
                }
            });
        }
    }
    finally {
        spinner.stop();
    }
    if (SystemParameters.getInstance().isJsonOutput()) {
        console.log(JSON.stringify(analyses));
    }
    else {
        console.log(chalk.green(`\nAnalyses:`));
        const result = analyses.map((analysis) => {
            return [
                analysis.analysisRequestId,
                analysis.id,
                analysis.tool.name,
                analysis.status,
                analysis.requestedAt,
                analysis.completedAt ? "Yes" : "No",
                analysis.target.name
            ];
        });
        const columnAttributes = [
            {
                headerLabel: "Request Id",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Analysis Id",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Tool",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Status"
            },
            {
                headerLabel: "Requested at"
            },
            {
                headerLabel: "Completed"
            },
            {
                headerLabel: "Target"
            }
        ];
        console.table(generateOutputTable(columnAttributes, result));
    }
}
async function getAnalysis(api, analysisId) {
    if (!analysisId) {
        handleError({
            error: {
                message: "Missing required argument: analysisId"
            }
        });
    }
    const spinner = getSpinner("Retrieving analysis...");
    let response;
    let snapshotAnalysis;
    try {
        response = await api.get(`/analyses/${analysisId}`);
        const parsedResponse = AnalysisResultsSchema.safeParse(response.data);
        if (!parsedResponse.success) {
            return handleError({
                error: {
                    message: "Invalid response from API"
                }
            });
        }
        snapshotAnalysis = parsedResponse.data;
    }
    catch (processError) {
        console.log(processError);
        if (axios.isAxiosError(processError)) {
            return handleError({
                response: processError.response
            });
        }
        else {
            return handleError({
                error: {
                    message: processError.message
                }
            });
        }
    }
    finally {
        spinner.stop();
    }
    if (SystemParameters.getInstance().isJsonOutput()) {
        console.log(JSON.stringify({
            analysisId: snapshotAnalysis.id,
            tool: snapshotAnalysis.tool.name,
            status: snapshotAnalysis.status,
            observations: snapshotAnalysis.observations,
            error: snapshotAnalysis.error ? snapshotAnalysis.error : ""
        }));
    }
    else {
        console.log(chalk.green(`\nRetrieved analysis:`));
        const columnAttributes = [
            {
                headerLabel: "Analysis Id",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Tool",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Status"
            },
            {
                headerLabel: "Observations"
            },
            {
                headerLabel: "Error"
            }
        ];
        console.table(generateOutputTable(columnAttributes, [
            [
                snapshotAnalysis.id,
                snapshotAnalysis.tool.name,
                snapshotAnalysis.status,
                snapshotAnalysis.observations.length,
                snapshotAnalysis.error ? snapshotAnalysis.error : ""
            ]
        ]));
        console.log(chalk.gray(`(The raw analysis output can be seen by adding the --output=json at the end of the command)`));
    }
}
async function getAnalysisReport(api, analysisRequestId) {
    if (!analysisRequestId) {
        handleError({
            error: {
                message: "Missing required argument: analysisRequestId"
            }
        });
    }
    const spinner = getSpinner("Retrieving analysis report...");
    let response;
    let analysisReport;
    try {
        response = await api.get(`/analysisRequests/${analysisRequestId}/report`);
        const parsedResponse = AnalysisReportSchema.safeParse(response.data);
        if (!parsedResponse.success) {
            return handleError({
                error: {
                    message: "Invalid response from API"
                }
            });
        }
        analysisReport = parsedResponse.data;
    }
    catch (processError) {
        if (axios.isAxiosError(processError)) {
            return handleError({
                response: processError.response
            });
        }
        else {
            return handleError({
                error: {
                    message: processError.message
                }
            });
        }
    }
    finally {
        spinner.stop();
    }
    if (analysisReport.errorMessage) {
        return handleError({
            error: {
                message: analysisReport.errorMessage
            }
        });
    }
    if (SystemParameters.getInstance().isJsonOutput()) {
        console.log(JSON.stringify(analysisReport));
    }
    else {
        console.log(chalk.green(`Download URL of generated PDF report:`));
        console.log(analysisReport.downloadURLOfGeneratedReport);
    }
}
async function getAnalysesProgress(api, analysisRequestId) {
    if (!analysisRequestId) {
        handleError({
            error: {
                message: "Missing required argument: analysisRequestId"
            }
        });
    }
    const spinner = getSpinner("Retrieving analyses progress...");
    let response;
    let analyses;
    try {
        response = await api.get(`/analysisRequests/${analysisRequestId}`);
        const parsedResponse = AnalysisResultsSchema.array().safeParse(response.data);
        if (!parsedResponse.success) {
            return handleError({
                error: {
                    message: "Invalid response from API"
                }
            });
        }
        analyses = parsedResponse.data;
    }
    catch (processError) {
        console.log(processError);
        if (axios.isAxiosError(processError)) {
            return handleError({
                response: processError.response
            });
        }
        else {
            return handleError({
                error: {
                    message: processError.message
                }
            });
        }
    }
    finally {
        spinner.stop();
    }
    if (SystemParameters.getInstance().isJsonOutput()) {
        console.log(JSON.stringify(analyses.map((analysis) => ({
            analysisId: analysis.id,
            tool: analysis.tool.name,
            observations: analysis.observations,
            error: analysis.error
        }))));
    }
    else {
        console.log(chalk.green(`\nRetrieved analyses:`));
        const result = analyses.map((analysis) => {
            return [
                analysisRequestId,
                analysis.id,
                analysis.tool.name,
                analysis.status,
                analysis.observations.length,
                analysis.error ?? "",
                humanDatesDiff(analysis.requestedAt, analysis.completedAt ?? new Date())
            ];
        });
        const columnAttributes = [
            {
                headerLabel: "Request Id",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Analysis Id",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Tool",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Status"
            },
            {
                headerLabel: "Observations"
            },
            {
                headerLabel: "Error"
            },
            {
                headerLabel: "Duration"
            }
        ];
        console.table(generateOutputTable(columnAttributes, result));
        console.log(chalk.gray(`(The raw analysis output can be seen by adding the --output=json at the end of the command)`));
    }
}
