import axios from "axios";
import chalk from "chalk";
import getAPI from "../config/api.js";
import SystemParameters from "../config/config.js";
import getSpinner from "../utils/getSpinner.js";
import handleError from "../utils/handleError.js";
import { CreateRepositorySchema, ListRepositoriesSchema } from "../types/schemas.js";
import { COMMAND_ACTIONS } from "../utils/constants.js";
import { ColumnAlignment, generateOutputTable } from "../utils/ttyOutputHelper.js";
export async function handleRepositoryAction(action, name) {
    const api = getAPI();
    switch (action) {
        case COMMAND_ACTIONS.LIST:
            return listRepositories(api);
        case COMMAND_ACTIONS.CREATE:
            return createRepository(api, name);
        default:
            handleError({
                error: {
                    message: `Invalid action: [${action}] must be in [${COMMAND_ACTIONS.LIST}, ${COMMAND_ACTIONS.CREATE}].`
                }
            });
    }
}
async function createRepository(api, name) {
    if (!name)
        handleError({ error: { message: "Missing required argument: name" } });
    const spinner = getSpinner("Creating repository...");
    let response;
    let repository;
    try {
        response = await api.post("/repositories", { name });
        const parsedResponse = CreateRepositorySchema.safeParse(response.data);
        if (!parsedResponse.success) {
            return handleError({
                error: {
                    message: "Invalid response from API"
                }
            });
        }
        repository = parsedResponse.data;
    }
    catch (processError) {
        if (axios.isAxiosError(processError)) {
            return handleError({
                response: processError.response
            });
        }
        else {
            return handleError({
                error: {
                    message: processError.message
                }
            });
        }
    }
    finally {
        spinner.stop();
    }
    if (SystemParameters.getInstance().isJsonOutput()) {
        console.log(JSON.stringify({ ID: response.data.id, Name: response.data.name }));
    }
    else {
        const result = [[repository.id, repository.name]];
        console.log(chalk.green(`\nCreated repository:`));
        const columnAttributes = [
            {
                headerLabel: "Id",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Name"
            }
        ];
        console.table(generateOutputTable(columnAttributes, result));
    }
}
async function listRepositories(api) {
    const spinner = getSpinner("Retrieving repositories...");
    let response;
    let repositories;
    try {
        response = await api.get("/repositories");
        const parsedResponse = ListRepositoriesSchema.safeParse(response.data);
        if (!parsedResponse.success) {
            return handleError({
                error: {
                    message: "Invalid response from API"
                }
            });
        }
        repositories = parsedResponse.data.repositories;
    }
    catch (processError) {
        if (axios.isAxiosError(processError)) {
            return handleError({
                response: processError.response
            });
        }
        else {
            return handleError({
                error: {
                    message: processError.message
                }
            });
        }
    }
    finally {
        spinner.stop();
    }
    if (SystemParameters.getInstance().isJsonOutput()) {
        console.log(JSON.stringify(repositories));
    }
    else {
        console.log(chalk.green(`\nRepositories:`));
        const result = repositories.map((repo) => {
            return [
                repo.id,
                repo.name,
                repo.createdAt,
                repo._count.snapshots ?? 0,
                repo._count.analyses ?? 0
            ];
        });
        const columnAttributes = [
            {
                headerLabel: "Id",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "Name"
            },
            {
                headerLabel: "Created at"
            },
            {
                headerLabel: "# snapshots",
                alignment: ColumnAlignment.Center
            },
            {
                headerLabel: "# analyses",
                alignment: ColumnAlignment.Center
            }
        ];
        console.table(generateOutputTable(columnAttributes, result));
    }
}
